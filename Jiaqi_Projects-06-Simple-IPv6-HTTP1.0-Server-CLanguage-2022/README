The task is to write a simple HTTP Server. There is only a limited range of content that needs to be
served, and it only needs to resp ond to GET requests for staticles. You can assume that GET requests
are no longer than 2 kB in size; note that this is larger than a typical MTU, and so you must be able to
read in a multi-packet request.

Example content that needs to be served is:
- Content File Extension
- HTML -> .html
- JPEG -> .jpg
- CSS  -> .css
JavaScript -> .js

For these extensions, the correct MIME type should b e reported (see https://mimetype.io/all- types).
For all other extensions, or if there is no extension like Makefile, you can return a MIME type of
application/octet-stream. 

The minimum requirement is that the server implements HTTP 1.0, and as such, your server does not
have to support pipelining or persistent connections. Your server should be able to handle multiple
incoming requests by making use of Pthreads (or similar concurrent programming technique) to process
and respond to each incoming request.

Your server program must use the following command line arguments:
- protocol number: 4 for IPv4 and 6 for IPv6
- port number
- string path to root web directory

The port number will be the port the server will listen for connections on. The string path to the root
web directory p oints to the directory that contains the content that is to be served. For example:

/home/comp30023/website

All paths requested by a client should be treated as relative to the path specied on the command line.
For example, if a request was received with the path /css/style.css it would be expected to be found
at:

/home/comp30023/website/css/style.css

The server must support responding with either a 200 response containing the requested file, or a 404
response if the requested file is not found. You do not need to handle requests with invalid headers (but
the program should never crash), but paths to non-existent files may be requested, and if they are a 404
should be returned. Response headers should be valid and must included at a minimum:

- Http Status
- Content-type

To run your server program on your VM prompt, type:
./server [protocol number] [port number] [path to web root]
where:
[protocol number] is 4 for IPv4 or 6 for IPv6
[port number] is a valid p ort numb er (e.g., 8080), and
[path to web root] is a valid absolute path (e.g., /home/comp30023/website)
